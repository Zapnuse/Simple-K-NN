import numpy as np
from sklearn import datasets
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# load the iris dataset as an example
iris = datasets.load_iris()
X = iris.data
y = iris.target

# split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# define the number of neighbors to consider (k)
k = 5

# loop through the test instances and make predictions
predictions = []
for test_instance in X_test:
    distances = []
    for i, train_instance in enumerate(X_train):
        # calculate the Euclidean distance between the test and train instances
        distance = np.sqrt(np.sum((test_instance - train_instance)**2))
        distances.append([distance, i])
    # sort the distances in ascending order
    distances = sorted(distances)
    # extract the indices of the k nearest neighbors
    k_nearest_indices = [distances[i][1] for i in range(k)]
    # extract the class labels of the k nearest neighbors
    k_nearest_labels = [y_train[i] for i in k_nearest_indices]
    # use the majority class label as the prediction
    prediction = max(set(k_nearest_labels), key=k_nearest_labels.count)
    predictions.append(prediction)

# calculate the accuracy of the model
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)
